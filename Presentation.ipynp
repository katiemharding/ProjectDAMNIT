{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ProjectDAMNIT\n",
    "## DAta MaNagement Interface Tool (DAMNIT)\n",
    "\n",
    "The volume of sequencing data being produced continues to out-pace the ability to store and efficiently manage it. \n",
    "\n",
    "What do you do with files that are too big to fit on GitHub?\n",
    "\n",
    "We have been developing a file storage system that will use AWS to store large files, and a series of python scrips to track changes in and store these files.  \n",
    "\n",
    "#### During this project we:\n",
    "1. Developed an Initilization program to start the data file storage system.  This includes building the directory structure, and initializing the dictionaries for tracking files.\n",
    "2. Wrote a program to create a unique variable based on the file contents (checksum or md5)\n",
    "3. New additions to the data base are added and tracked with a python script that traverses a dictionary on a file system and archives only new or modified files, providing a non-redundant data store.  \n",
    "4. New additions are compared with existing files, and the differences to previous versions are compared and stored.  This means that each entry is not stored in the data base saving memory and time.  \n",
    "5. Developed a website that can be used to add in new files and track existing files in the database."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Programming concepts required by the project:\n",
    "- Use of common Python data structures, especially dictionary insertion and look-up\n",
    "- Using modules (including os, sys, glob, subprocess)\n",
    "- Interfacing with the operating system using built-in Python functions and the subprocess module\n",
    "- Implementing depth-first and breadth-first recursive algorithms\n",
    "\n",
    "### Some cool things we have learned:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import subprocess\n",
    "import shutil\n",
    "import glob\n",
    "import json\n",
    "from md5_module import load_md5\n",
    "from damnit_IO import read_json\n",
    "from damnit_IO import write_json"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### What are check sums, what do they do.  \n",
    "Check sums are a way to record the file contents of the file with in a unique string\n",
    "It is used in file security measures (if a file has been tampered with the check sum will be different).  We are using them to record if the file has been updated or not.  If there are any changes to the file, the checksum will be different, and we can then record those changes.  Likewise, if the checksum is the same, the file contents are the same regardless of their names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_md5(new_string):\n",
    "        if shutil.which('md5sum'):\n",
    "            md5 = subprocess.run(new_string, stdout=subprocess.PIPE )\n",
    "            stdout = md5.stdout\n",
    "            stdout = stdout.split()\n",
    "            stdout = stdout[0]\n",
    "            stdout = stdout.decode(\"utf-8\")\n",
    "        elif shutil.which(\"md5\"):\n",
    "            md5 = subprocess.run([\"md5\",new_file], stdout=subprocess.PIPE )\n",
    "            stdout = md5.stdout\n",
    "            stdout = stdout.split()\n",
    "            stdout = stdout[3]\n",
    "            stdout = stdout.decode(\"utf-8\")\n",
    "        else:\n",
    "            raise OSError('no md5 or md5sum in path')\n",
    "\n",
    "        return stdout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "bash: line 1: ./compare: No such file or directory\n"
     ]
    },
    {
     "ename": "CalledProcessError",
     "evalue": "Command 'b'./compare test3LinesEcoli.fasta\\n    \\n    \\n'' returned non-zero exit status 127.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mCalledProcessError\u001b[0m                        Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-da822740de58>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'bash'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'./compare test3LinesEcoli.fasta\\n    \\n    \\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m   2356\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2357\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mmagic_arg_s\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2358\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2359\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2360\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/IPython/core/magics/script.py\u001b[0m in \u001b[0;36mnamed_script_magic\u001b[0;34m(line, cell)\u001b[0m\n\u001b[1;32m    140\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m                 \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscript\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 142\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshebang\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    143\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m         \u001b[0;31m# write a basic docstring:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m</Users/info/anaconda3/lib/python3.7/site-packages/decorator.py:decorator-gen-110>\u001b[0m in \u001b[0;36mshebang\u001b[0;34m(self, line, cell)\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/IPython/core/magic.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(f, *a, **k)\u001b[0m\n\u001b[1;32m    185\u001b[0m     \u001b[0;31m# but it's overkill for just that one bit of state.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmagic_deco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 187\u001b[0;31m         \u001b[0mcall\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/IPython/core/magics/script.py\u001b[0m in \u001b[0;36mshebang\u001b[0;34m(self, line, cell)\u001b[0m\n\u001b[1;32m    243\u001b[0m             \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstderr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflush\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    244\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_error\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturncode\u001b[0m\u001b[0;34m!=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 245\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mCalledProcessError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturncode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstderr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_script\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mto_close\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mCalledProcessError\u001b[0m: Command 'b'./compare test3LinesEcoli.fasta\\n    \\n    \\n'' returned non-zero exit status 127."
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "./compare test3LinesEcoli.fasta\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "DamnitPath = '.damnit/'\n",
    "md5Graph_NewToOld_location = DamnitPath + 'md5Graph_NewToOld.json'\n",
    "FileNameDictionary_location = DamnitPath + 'filenames_dict.json'\n",
    "\n",
    "def find_diff(new_file, old_file):\n",
    "        oldMD5 = load_md5(old_file)\n",
    "        string = \"diff {} {} > {}.patch\"\n",
    "        command = string.format(new_file,old_file,oldMD5)\n",
    "        subprocess.run(command, shell = True)\n",
    "# the code in the command line: diff new_file old_file >filename\n",
    "# apparently we don't need --unified=0\n",
    "\n",
    "def load_patch_dict(indivFile, damnit_path = '.damnit'):\n",
    "    newMD5 = load_md5(indivFile) # find the md5 of the new file\n",
    "    md5Graph_NewToOld = read_json(damnit_path + \"/md5Graph_NewToOld.json\")\n",
    "    # Open and read filenames_dict.json file\n",
    "    FileNameDictionary = read_json(damnit_path + \"/filenames_dict.json\")\n",
    "\n",
    "    if indivFile in FileNameDictionary:\n",
    "        oldMD5 = FileNameDictionary[indivFile] # for ease of reading, rename the file\n",
    "        if newMD5 == oldMD5: # if the new md5 is the same as the old md5 do nothing.\n",
    "            print(\"no change to\", indivFile)\n",
    "        else: # if the file is the same and the file has changed:\n",
    "            # Process:\n",
    "            # 1) find the difference between the files (the path\n",
    "            # 2) the graph dictionary is the new MD5 as key and the old MD5 as value\n",
    "            # 3) change the file name dictionary to the new value (the new MD5)\n",
    "            # 4) copy the file to DamnitPath directory the name of this file is the MD5\n",
    "            # 5) copy the Patch to the DamnitPath directory, the name is the old MD5\n",
    "            # !!!!!!!!!!! this will overwright the old file, and all the data in it. !!!!!!!!\n",
    "            difference = find_diff(indivFile, (DamnitPath + oldMD5)) # this is the patch\n",
    "            shutil.copyfile(indivFile, (DamnitPath+newMD5))\n",
    "            shutil.copyfile((oldMD5+\".patch\"), (DamnitPath + oldMD5))\n",
    "            md5Graph_NewToOld[newMD5] = oldMD5 # add in the new md5 as a key, the old md5 is the value\n",
    "            FileNameDictionary[indivFile] = newMD5 # the file name is now linked to the new MD5 (old one lost)\n",
    "            with open(FileNameDictionary_location, \"w\") as newFileDict:\n",
    "                json.dump(FileNameDictionary, newFileDict)\n",
    "            with open(md5Graph_NewToOld_location, \"w\") as newPatch:\n",
    "                json.dump(md5Graph_NewToOld, newPatch) # open the file as write, save new dict\n",
    "            print(indivFile, \"has changed\")\n",
    "    else: # now the file name is not tracked, and it is not in the dictionary\n",
    "        # Process:\n",
    "        # 1) we need to generate the new file MD5, add it to the dictionary\n",
    "        # 2) save the new filename dictionary\n",
    "        # 3) add the file to the the graph dictionary.\n",
    "        # 4) save the graph dictionary\n",
    "        shutil.copyfile(indivFile, (DamnitPath+newMD5))\n",
    "        FileNameDictionary[indivFile] = newMD5 # add it to the file name dictionary\n",
    "        with open(FileNameDictionary_location, \"w\") as newFileDict:\n",
    "            json.dump(FileNameDictionary, newFileDict)\n",
    "        # old version created the graph file.  since it is now created we don't need it anymore\n",
    "        md5Graph_NewToOld[newMD5] = \"none\" # since there are no changes, the first value will be none\n",
    "        with open(md5Graph_NewToOld_location, \"w\") as newPatch:\n",
    "            json.dump(md5Graph_NewToOld, newPatch) # open the file as write, save new dict\n",
    "            print(\"new file\", indivFile)\n",
    "#    print(FileNameDictionary)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    try:\n",
    "        Usr_input = sys.argv[1]\n",
    "        print(\"User provided file: \", Usr_input)\n",
    "        load_patch_dict(Usr_input) # run the load patch function\n",
    "\n",
    "    except IndexError:\n",
    "        fileList = glob.glob('*') # search for new files\n",
    "        for indivfile in fileList:\n",
    "            load_patch_dict(indivfile) # run the load patch function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### How to initialize a directory:\n",
    "what did you learn while working on this part?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Future upgrades will include:\n",
    "1. Detect files with identical contents (but not necessarily identical names) to already-archived files via SHA checksums. \n",
    "2. store user-defined file/project metadata\n",
    "3. Retrieve root files (previous versions of stored files) and revert to older versions of stored files\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
